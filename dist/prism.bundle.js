!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.prism=e():t.prism=e()}(self,()=>(()=>{"use strict";var t={d:(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{AsyncSearch:()=>f,Run:()=>r,Search:()=>u});class r{run(){throw new Error("Abstract method 'run()' must be implemented by subclasses.")}}class o{constructor(t=void 0,e=void 0,r={}){this._parent=t,this._name=e,this._children=r}get parent(){return this._parent}set parent(t){this._parent=t}get name(){return this._name}let(t,e){return this[t]=e,this}letChild(t,e){return this._children[t]=e,e.parent=this,e._name=t,this}get(...t){return this.ancestors().which(e=>t.every(t=>void 0!==e[t])).then(e=>e[t[0]]).what()}getChild(...t){let e=this;for(const r of t)if(e=e?._children?.[r],!e)break;return e}resolve(t){return"string"==typeof t?this.get(t):t}forget(t){return delete this[t],this}isLeaf(){return void 0===this.children().what()}isRoot(){return void 0===this.parent}children(){return a.as(Object.values(this._children))}root(){return this.parent?this.parent.root():this}ancestors(){return a.along(this,t=>t.parent)}}class s extends o{constructor(t=void 0,e=void 0){super(t,void 0),this._last=e,this._length=t?t._length+1:void 0!==e?1:0}static of(...t){return(new s).along(t)}get prev(){return this._parent}get last(){return this._last}get length(){return this._length}let(t,e){throw new Error("A Path is immutable!")}letChild(t,e){throw new Error("A Path is immutable!")}forget(t){throw new Error("A Path is immutable!")}isEmpty(){return 0==this._length}add(t){return new s(0<this.length?this:void 0,t)}along(t){let e=this;for(let r of t)e=e.add(r);return e}across(t){const e=this,r=new a;return r[Symbol.iterator]=function*(){for(let r of t)yield e.add(r)},r}toArray(t=this.length,e=t=>t){const r=new Array(t);let o=this;for(;0<t;)r[t-1]=e(o.last),o=o.prev,t--;return r}}class n{what(...t){throw new Error("Abstract method what() must be implemented in subclasses!")}let(t,e){throw new Error("Abstract method let() must be implemented!")}static of(t,e){return Array.isArray(t)||(t=[t]),n.as((...r)=>a.equal(t,r)?e:void 0)}static as(t){if(t instanceof n)return t;if("function"!=typeof t){const e=t;t=t=>t===e}const e=(...e)=>t(...e);return Object.setPrototypeOf(e,n.prototype),e.what=t,e}if(t=t=>void 0!==t){return n.if(this,t)}static if(t,e=t=>void 0!==t){return n.as(r=>n.what(e,r)?n.what(t,r):void 0)}sthen(t){return n.sthen(this,t)}static sthen(...t){return n.as(e=>{let r=e;for(let e of t){if(void 0===r)break;r=r instanceof Promise?r.stthen(e):n.what(e,r)}return r})}else(t){return n.else(this,t)}static else(...t){return n.as(e=>{let r;for(let o of t){try{r=n.what(o,e)}catch{r=void 0}if(void 0!==r)break}return r})}which(t=t=>void 0!==t){return n.which(this,t)}static which(t,e=t=>void 0!==t){return n.as(r=>a.as(n.what(t,r)).which((t,o)=>e(t,o,r)))}when(t,e=!0,r=e){return n.when(this,t,e,r)}static when(t,e,r=!0,o=r){const s="number"==typeof e;return n.as((...i)=>{const c=s?e:(t,r)=>n.what(e,t,r,...i);return a.as(n.what(t,...i)).when(c,r,o)})}match(...t){return n.match(this,...t)}static match(...t){const e=t.length<2?e=>{const r=n.what(t[0],e);return r[Symbol.iterator]?a.as(r).sthen(t=>[e,t]):[e,r]}:e=>t.map(t=>n.what(t,e));return n.as(e)}each(t){return n.as((...e)=>{const r=new a,o=a.as(this.what(...e)).which();return r[Symbol.iterator]=function*(){for(let e of o)for(let r of a.as(n.what(t,e)).which())yield r},r})}static each(...t){return n.as(e=>{const r=e instanceof s?e:s.of(e);return r.length>t.length?a.of():r.across(a.as(n.what(t[r.length-1],r.last)).which()).which()})}self(t=void 0,e=void 0){return n.self(this,t,e)}static self(t,e=void 0,r=void 0){let o;return o=void 0===e?void 0===r?e=>e.across(a.as(n.what(t,e.last)).which()):(...e)=>{const o=n.what(t,...e);if(void 0===o)return;const s={};return s[r]=o,s}:"number"==typeof e?(...o)=>{const s=o.splice(e,0,r);return n.what(t,...s)}:o=>{const s=a.as("string"==typeof e?[e]:e).sthen(t=>"string"==typeof t?o[t]:t),i=n.what("string"==typeof t?o[t]:t,...s);if(void 0!==i)return void 0!==r?(o[r]=i,o):i},n.as(o)}static what(t,...e){return t instanceof n?t.what(...e):"function"==typeof t?t(...e):t}}class i{[Symbol.asyncIterator](){throw"abstract method!"}static of(...t){const e=new i;return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield await e},e}static as(t){if(t instanceof i)return t;if(null!=t&&"function"==typeof t[Symbol.asyncIterator]){const e=new i;return e[Symbol.asyncIterator]=async function*(){for await(const e of t)yield e},e}if(null!=t&&"function"==typeof t[Symbol.iterator]){const e=new i;return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield e},e}return i.of(t)}async toArray(){const t=[];for await(const e of this)t.push(e);return t}async equals(t){return i.equal(this,t)}static along(t,e){const r=new i;return r[Symbol.asyncIterator]=async function*(){let r=t;for(;null!=r;)yield r,r=await n.what(e,r)},r}static async equal(t,e){const r=i.as(t)[Symbol.asyncIterator](),o=i.as(e)[Symbol.asyncIterator]();for(;;){const[t,e]=await Promise.all([r.next(),o.next()]);if(t.done||e.done)return t.done===e.done;if(t.value instanceof i||e.value instanceof i){if(!await i.equal(t.value,e.value))return!1}else if(t.value!==e.value)return!1}}static isAsyncIterable(t){return null!=t&&"function"==typeof t[Symbol.asyncIterator]}if(t=t=>void 0!==t){const e=this,r=new i;return r[Symbol.asyncIterator]=async function*(){let r=0;for await(const o of e)await t(o,r++)&&(yield o)},r}sthen(t){const e=this,r=new i;return r[Symbol.asyncIterator]=async function*(){let r=0;for await(const o of e)yield await t(o,r++)},r}else(t=void 0){return void 0===t?i.else(this):i.else([this,i.as(t)])}static else(t){const e=new i;return e[Symbol.asyncIterator]=async function*(){for await(const e of i.as(t)){const t=i.as(e);for await(const e of t)yield e}},e}which(t){return this.if(t)}when(t,e=!0,r=e){return i.when(this,t,e,r)}static when(t,e,r=!0,o=r){if(void 0===e){const e={};return e[Symbol.asyncIterator]=async function*(){for await(const e of t)yield e},i.as(e)}if("number"==typeof e){const t=e;e=(e,r)=>r===t}const s=new i;return s[Symbol.asyncIterator]=r?async function*(){let r=0,s=!1;for await(const i of t)s?yield i:await n.what(e,i,r)&&(s=!0,o&&(yield i)),r++}:async function*(){let r=0,s=!1;for await(const i of t){if(s)break;await n.what(e,i,r)?(s=!0,o&&(yield i)):yield i,r++}},s}match(t=void 0){return void 0===t?i.match(this):i.match(this,i.as(t))}static match(...t){const e=new i,r=t.map(t=>i.as(t));return e[Symbol.asyncIterator]=async function*(){const t=r.map(t=>t[Symbol.asyncIterator]());for(;;){const e=await Promise.all(t.map(t=>t.next()));if(e.some(t=>t.done))break;yield e.map(t=>t.value)}},e}each(t=void 0){if(void 0===t)return i.each(...this);const e=this,r=new i;return r[Symbol.asyncIterator]=async function*(){for await(const r of e)for await(const e of i.as(t))yield[r,e]},r}static each(...t){const e=t.map(t=>i.as(t));return n.as(t=>{if(t.length>=e.length)return i.of();const r=e[t.length],o=new i;return o[Symbol.asyncIterator]=async function*(){for await(const e of r)yield t.add(e)},o})}self(){return i.self(this)}static self(t){const e=i.as(t),r=new i;return r[Symbol.asyncIterator]=async function*(){for(;;)yield e},r}what(t,e){return i.what(this,t,e)}static async what(t,e,r){const o=i.as(t);if(e){let t=void 0!==r;for await(const s of o)t?r=await n.what(e,r,s):(r=s,t=!0);return r}for await(const t of o)return t}}class a{[Symbol.iterator](){throw"abstract method!"}static as(t){if(void 0===t)return a.of();if(t instanceof a)return t;if(t[Symbol.iterator]){const e=new a;return e[Symbol.iterator]=t[Symbol.iterator].bind(t),e}{const e=new a;return e[Symbol.iterator]=function*(){yield t},e}}static of(...t){const e=new a;return e[Symbol.iterator]=function*(){for(const e of t)yield e},e}static along(t,e){const r=new a;return r[Symbol.iterator]=function*(){let r=t;for(;r;)yield r,r=n.what(e,r)},r}toArray(){return Array.from(this)}equals(t){return a.equal(this,t)}static equal(t,e){if("string"==typeof t||!a.isIterable(t)||"string"==typeof e||!a.isIterable(e))return t===e;{const r=t[Symbol.iterator](),o=e[Symbol.iterator]();for(;;){const t=r.next(),e=o.next();if(t.done||e.done)return t.done===e.done;if(!a.equal(t.value,e.value))return!1}}}static isIterable(t){return null!=t&&"function"==typeof t[Symbol.iterator]}if(t=t=>void 0!==t){return a.if(this,t)}static if(t,e=t=>void 0!==t){return a.which(t,e)}sthen(t){return a.sthen(this,t)}static sthen(t,e){const r=new a;return r[Symbol.iterator]=function*(){let r=0;for(let o of t)yield n.what(e,o,r++)},r}else(t=void 0){return void 0===t?a.else(this):a.else(a.of(this,a.as(t)))}static else(t){const e=new a;return e[Symbol.iterator]=function*(){for(let e of t)if(e[Symbol.iterator])for(let t of e)yield t;else yield e},e}which(t=t=>void 0!==t){return a.which(this,t)}static which(t,e=t=>void 0!==t){const r=new a;return r[Symbol.iterator]=function*(){let r=0;for(let o of t)n.what(e,o,r++)&&(yield o)},r}when(t,e=!0,r=e){return a.when(this,t,e,r)}static when(t,e,r=!0,o=r){if(void 0===e){const e={};return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield await e},i.as(e)}if("number"==typeof e){const t=e;e=(e,r)=>r===t}const s=new a;return s[Symbol.iterator]=r?function*(){let r=0,s=!1;for(let i of t)s?yield i:n.what(e,i,r)&&(s=!0,o&&(yield i)),r++}:function*(){let r=0,s=!1;for(let i of t){if(s)break;n.what(e,i,r)?(s=!0,o&&(yield i)):yield i,r++}},s}match(t=void 0){return void 0===t?a.match(...this):a.match(this,a.as(t))}static match(...t){const e=new a;return e[Symbol.iterator]=function*(){const e=t.map(t=>t[Symbol.iterator]());for(;;){const t=e.map(t=>t.next());if(t.some(t=>t.done))break;yield t.map(t=>t.value)}},e}each(t=void 0){if(void 0===t)return a.each(...this);const e=this,r=new a;return r[Symbol.iterator]=function*(){for(let r of e)for(let e of a.as(t))yield[r,e]},r}static each(...t){return t=t.map(t=>t[Symbol.iterator]?t:[t]),n.as(e=>e.length<t.length?e.across(t[e.length]):a.of())}self(){return a.self(this)}static self(t){const e=new a;return e[Symbol.iterator]=function*(){for(;;)yield t},e}what(t=void 0,e=void 0){return a.what(this,t,e)}static what(t,e,r){if(e){void 0===r&&(r=a.what(t),t=a.when(t,1));for(let o of t)r=n.what(e,r,o);return r}for(let e of t)return e}}a.NATURAL=new a,a.NATURAL[Symbol.iterator]=function*(){let t=0;for(;;)yield t++};class c extends a{constructor(){super()}n(){throw new Error("Abstract method: n()")}has(t){throw new Error("Abstract method: has(item)")}add(t){throw new Error("Abstract method: add(item)")}remove(t){throw new Error("Abstract method: remove(item)")}clear(){throw new Error("Abstract method: clear()")}get(t){throw new Error("Abstract method: get(query)")}[Symbol.iterator](){throw new Error("Abstract method: Symbol.iterator()")}create(t){return!this.has(t)&&this.add(t)}read(t){return this.has(t)?a.as(this.get(t)).what():void 0}readAll(t){return this.get(t)}update(t,e,r=!1){return this.has(t)?this.remove(t)&&this.add(e):!!r&&this.add(e)}delete(t){return this.remove(t)}deleteAll(t){return this.removeAll(t)}query(t){return this.get(t)}isEmpty(){return 0===this.n()}let(t){return this.add(t),this}addAll(t){const e=[];for(const r of t)this.add(r)&&e.push(r);return this}removeAll(t){const e=[];for(const r of t)this.remove(r)&&e.push(r);return e}}Symbol.asyncIterator;class h extends c{constructor(){super()}peek(t=!0){throw new Error("Abstract method: peek() must be implemented by subclass.")}poll(t=!0){throw new Error("Abstract method: poll() must be implemented by subclass.")}reverse(){throw new Error("Abstract method: reverse() must be implemented by subclass.")}select(t,e=!0){t<0&&(t=0);const r=this.n()-t,o=new Array(r<0?0:r).fill(void 0);let s=e?o.length-1:0;const n=e?-1:1;for(;this.n()>t;){const t=this.poll(!e);o[s]=t,s+=n}return o}}class l extends h{constructor(t=!0,e=[]){super(),this._fifo=t,this._items=e}get fifo(){return this._fifo}get items(){return this._items}n(){return this.items.length}has(t){return!1}add(t){return this.items.push(t),!0}remove(t){return!1}peek(t=!0){return this.items[this.index(t)]}poll(t=!0){return 0===this.index(t)?this.items.shift():this.items.pop()}index(t){return this.fifo?t?0:this.items.length-1:t?this.items.length-1:0}clear(){this.items.length=0}[Symbol.iterator](){return this.items[Symbol.iterator]()}reverse(){const t=new a,e=this;return t[Symbol.iterator]=function*(){let t=e.items.length-1;for(;t>=0;)yield e.items[t],t--},t}}class u extends a{start;space;queue;max;constructor(t=void 0,e=void 0,r=new l,o=256){super(),this.start=t,this.space=e,this.queue=r,this.max=o}from(...t){return this.start=t,this}through(t){return this.space=t,this}via(t,e=void 0){return this.queue=t,void 0!==e&&(this.max=e),this}*[Symbol.iterator](){const t=this.queue,e=this.space,r=a.as(this.start),o=this.max;for(t.clear(),t.addAll(r);t.n()>0;){const r=t.poll();let s;try{s=e(r)}catch(t){throw new Error(`Search expansion failed at item: ${r}\n${t}`)}void 0!==s&&(t.addAll(a.as(s)),void 0!==o&&t.select(o)),yield r}}}class f extends i{start;space;queue;max;cores;constructor(t=void 0,e=void 0,r=new l,o=256,s=16){super(),this.start=t,this.space=e,this.queue=r,this.max=o,this.cores=s}from(...t){return this.start=t,this}through(t){return this.space=t,this}via(t,e=void 0){return this.queue=t,void 0!==e&&(this.max=e),this}inParallel(t){return this.cores=t,this}async*batchIterator(){const t=this.queue,e=this.space,r=this.start,o=this.max,s=this.cores;for(t.clear(),t.addAll(await i.as(r).toArray());t.n()>0;){const r=t.select(t.n()-s,!1);let n;try{n=(await i.as(await Promise.all(r.map(e))).toArray()).flat()}catch(t){throw new Error(`AsyncSearch expansion failed at batch: ${JSON.stringify(r)}\n${t}`)}t.addAll(n),void 0!==o&&t.select(o),yield r}}async*[Symbol.asyncIterator](){for await(const t of this.batchIterator())for(const e of t)yield e}}return e})());